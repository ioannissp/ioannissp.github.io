{
  "hash": "fbfdfaae0cdf17c37c9fa258f314a0c0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Web scraping using rvest\"\nsubtitle: \"Applying web scraping to extract S&P 500 annual returns data\"\nimage: /data/raw/image_data/snp500rvest_snp500.png\ndate: \"2024-05-9\"\n---\n\n\nAcquiring data is an important step in Data Science. Without the required data you cannot finish your project, or more precisely, you cannot even start it. When we study Data Science at university or in an online course we almost always have the data we need ready for us, usually in a nice .csv file. Of course this is not always the case for real-life applications. Especially in the case you want to work on something no one has worked before, you need to find the data for yourself. If you are lucky, someone will have the data ready for you either to download from the web or through an API.\n\nHowever, there is always the possibility that the data you need is in a website for example presented in a table. That's a weird situation: you are so close to the data you want, but yet so far. Until now!\n\nIn this project we will introduce the idea of web scraping to acquire data from a webpage. Specifically, we will use the rvest libary in R to acquire data from a table online. We will apply this to get the annual returns of S&P 500 from [slickcharts.com](https://www.slickcharts.com/sp500/returns) and use them on an application.\n\nLet's firstly import the rvest library.\n\n\n::: {.cell warnings='false'}\n\n```{.r .cell-code}\nlibrary(rvest)\n```\n:::\n\n\nWebpages are written in html. Rvest provides all the tools we need to read an html page in R. Indeed, it is as easy as reading a .csv file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhtml <- read_html(\"https://www.slickcharts.com/sp500/returns\")\nclass(html)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"xml_document\" \"xml_node\"    \n```\n\n\n:::\n:::\n\n\nIf you visit the website you will see that the data we need are in a table. So, in the html code of the website the data will be in a table object. You can check this with right click+\"inspect page source\" on the website. Rvest provides an easy way to import tables from the web and the best thing is it imports them as tibbles. Let's see this below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsandp500<-html %>% \n  html_element(\"table\") %>%\n  html_table()\nhead(sandp500, n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n   Year `Total Return`\n  <int>          <dbl>\n1  2024           11.8\n2  2023           26.3\n3  2022          -18.1\n4  2021           28.7\n5  2020           18.4\n```\n\n\n:::\n:::\n\n\nThe above tibble has the returns of the S&P 500 for every year since 1926. We should note however, that the S&P 500 was founded in 1957 so all the data before that are not actual S&P 500 returns but S&P 90 returns (the predecessor of S&P 500). Also, since 2024 is not finished yet the return shown is just the return to this day.\n\nThe above notes are useful for what we are going to do next.\n\nBelow we will make a simple function to use for our data. Specifically, we are taking inspiration from the following quote from Warren Buffett, one of the most successful investors, who once said about the S&P 500\n\n> \"In my view, for most people, the best thing to do is to own the S&P 500 index fund.\"\n>\n> -Warren Buffett\n\nBut is this really true? The S&P 500 is considered one of the most important indices but we want to see how good it is in a span of specific years. For example, how are we going to see how the S&P 500 usually performs within five years? We will have to plot the rolling mean of the returns for five years. We will do this and plot our solution.\n\nLet's see how we do this. To begin with, for each year we will compute the rolling mean with the year in the beginning. So we want the year to be an integer. Also, in the edges we want our function to return NA, so we have to create a vector that has NA in the end, as many NAs as the years. For this reason we will use the function below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npad_with_nas<-function(x, n){\n  #vector x\n  #adding n pads in the end\n  padded_x<-rep(NA,(length(x)+n))\n  padded_x[1:(length(x))]=x\n  return(padded_x)\n}\n```\n:::\n\n\nWe try our function below to make sure it does what we want.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx<-c(1,2,3)\npad_with_nas(x,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1  2  3 NA NA NA\n```\n\n\n:::\n:::\n\n\nWe see that we got what we were expecting: our vector x with three NAs in the end.\n\nLet's move to the rolling mean function. This function will compute the rolling mean for five years after each year.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrolling_mean<-function(x, years){\n  #we want a numerical vector x\n  stopifnot(is.logical(x) | is.integer(x) | is.double(x) | is.complex(x))\n  stopifnot(length(x) > 0)\n  # and a positive integer years\n  stopifnot(length(years) == 1)\n  stopifnot(years %% 1 == 0)\n  stopifnot(years > 0)\n  \n  #function\n  padded_x<-pad_with_nas(x, years)\n  \n  output<-rep(NA,length(x))\n  \n  for (index in seq_along(x)){\n    indices_in_window<-seq(index,index+years-1, by=1)\n    output[index]=mean(padded_x[indices_in_window])\n    \n  }\n  return(output)\n  \n  \n}\n```\n:::\n\n\nWe will use this function to see how the rolling mean in the S&P 500 is changing every five years. To do this we will use the data that refer to the actual S&P 500, so for years from 1957. Also, since 2024 is not finished yet, we will exclude it. We do these below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsandp500_cleaned<-sandp500[2:68,]\nhead(sandp500_cleaned, n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n   Year `Total Return`\n  <int>          <dbl>\n1  2023           26.3\n2  2022          -18.1\n3  2021           28.7\n4  2020           18.4\n5  2019           31.5\n```\n\n\n:::\n:::\n\n\nWe also want to reverse the order in the lines of our S&P 500 tibble so it starts from year 1957 and not 2023. We do this with the dplyr library.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nsandp500_cleaned_reversed<-sandp500_cleaned %>%\n  arrange(desc(row_number()))\nhead(sandp500_cleaned_reversed, n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n   Year `Total Return`\n  <int>          <dbl>\n1  1957         -10.8 \n2  1958          43.4 \n3  1959          12.0 \n4  1960           0.47\n5  1961          26.9 \n```\n\n\n:::\n:::\n\n\nNow we import the ggplot2 library to plot the barplots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\nWe plot the barplots of the returns for five years.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeans<-rolling_mean(sandp500_cleaned_reversed$`Total Return`,5)\nmeans_no_na<-means[!is.na(means)]\nyears<-sandp500_cleaned_reversed$Year[!is.na(means)]\n\ndata<-data.frame(name=as.character(years), value=means_no_na)\nggplot(data, aes(x=name, y=value)) + \n  geom_bar(stat = \"identity\")+coord_flip()\n```\n\n::: {.cell-output-display}\n![](snp500rvest_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nThis is a simple barplot but it serves our purpose. You can add more things to the barplot to make it prettier using the commands from our previous project (\"The Economist\").\n\nWe indeed see that the S&P 500 averages mostly positive returns within 5 years. Apart from 1970 and 2000, if you buy the S&P 500 and you sell it in 5 years you will make a profit. Of course this is just an insight in the S&P 500 historical data and it should not be considered as investment advice.\n\nThis is the end of this project. We gave an explanation of web scraping and we applied it to stock market data. We created a nice function to get insights on the data we acquired ourselves online. I hope you enjoyed it!\n",
    "supporting": [
      "snp500rvest_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}